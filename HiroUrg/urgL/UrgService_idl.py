# Python stubs generated by omniidl from ../idl/UrgService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "svcUrg"
#
__name__ = "svcUrg"
_0_svcUrg = omniORB.openModule("svcUrg", r"../idl/UrgService.idl")
_0_svcUrg__POA = omniORB.openModule("svcUrg__POA", r"../idl/UrgService.idl")


# typedef ... log_data
class log_data:
    _NP_RepositoryId = "IDL:svcUrg/log_data:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_svcUrg.log_data = log_data
_0_svcUrg._d_log_data  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0)
_0_svcUrg._ad_log_data = (omniORB.tcInternal.tv_alias, log_data._NP_RepositoryId, "log_data", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0))
_0_svcUrg._tc_log_data = omniORB.tcInternal.createTypeCode(_0_svcUrg._ad_log_data)
omniORB.registerType(log_data._NP_RepositoryId, _0_svcUrg._ad_log_data, _0_svcUrg._tc_log_data)
del log_data

# interface UrgService
_0_svcUrg._d_UrgService = (omniORB.tcInternal.tv_objref, "IDL:svcUrg/UrgService:1.0", "UrgService")
omniORB.typeMapping["IDL:svcUrg/UrgService:1.0"] = _0_svcUrg._d_UrgService
_0_svcUrg.UrgService = omniORB.newEmptyClass()
class UrgService :
    _NP_RepositoryId = _0_svcUrg._d_UrgService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_svcUrg.UrgService = UrgService
_0_svcUrg._tc_UrgService = omniORB.tcInternal.createTypeCode(_0_svcUrg._d_UrgService)
omniORB.registerType(UrgService._NP_RepositoryId, _0_svcUrg._d_UrgService, _0_svcUrg._tc_UrgService)

# UrgService operations and attributes
UrgService._d_start_log = ((), (omniORB.tcInternal.tv_double, ), None)
UrgService._d_return_log = ((), (omniORB.typeMapping["IDL:svcUrg/log_data:1.0"], ), None)
UrgService._d_init_timestamp = ((), (omniORB.tcInternal.tv_boolean, ), None)

# UrgService object reference
class _objref_UrgService (CORBA.Object):
    _NP_RepositoryId = UrgService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def start_log(self, *args):
        return _omnipy.invoke(self, "start_log", _0_svcUrg.UrgService._d_start_log, args)

    def return_log(self, *args):
        return _omnipy.invoke(self, "return_log", _0_svcUrg.UrgService._d_return_log, args)

    def init_timestamp(self, *args):
        return _omnipy.invoke(self, "init_timestamp", _0_svcUrg.UrgService._d_init_timestamp, args)

    __methods__ = ["start_log", "return_log", "init_timestamp"] + CORBA.Object.__methods__

omniORB.registerObjref(UrgService._NP_RepositoryId, _objref_UrgService)
_0_svcUrg._objref_UrgService = _objref_UrgService
del UrgService, _objref_UrgService

# UrgService skeleton
__name__ = "svcUrg__POA"
class UrgService (PortableServer.Servant):
    _NP_RepositoryId = _0_svcUrg.UrgService._NP_RepositoryId


    _omni_op_d = {"start_log": _0_svcUrg.UrgService._d_start_log, "return_log": _0_svcUrg.UrgService._d_return_log, "init_timestamp": _0_svcUrg.UrgService._d_init_timestamp}

UrgService._omni_skeleton = UrgService
_0_svcUrg__POA.UrgService = UrgService
omniORB.registerSkeleton(UrgService._NP_RepositoryId, UrgService)
del UrgService
__name__ = "svcUrg"

#
# End of module "svcUrg"
#
__name__ = "UrgService_idl"

_exported_modules = ( "svcUrg", )

# The end.
