# Python stubs generated by omniidl from ../myIDL/hiroJointControl.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "myHRP"
#
__name__ = "myHRP"
_0_myHRP = omniORB.openModule("myHRP", r"../myIDL/hiroJointControl.idl")
_0_myHRP__POA = omniORB.openModule("myHRP__POA", r"../myIDL/hiroJointControl.idl")


# typedef ... KeyPose
class KeyPose:
    _NP_RepositoryId = "IDL:myHRP/KeyPose:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_myHRP.KeyPose = KeyPose
_0_myHRP._d_KeyPose  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0)
_0_myHRP._ad_KeyPose = (omniORB.tcInternal.tv_alias, KeyPose._NP_RepositoryId, "KeyPose", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0))
_0_myHRP._tc_KeyPose = omniORB.tcInternal.createTypeCode(_0_myHRP._ad_KeyPose)
omniORB.registerType(KeyPose._NP_RepositoryId, _0_myHRP._ad_KeyPose, _0_myHRP._tc_KeyPose)
del KeyPose

# typedef ... log_data
class log_data:
    _NP_RepositoryId = "IDL:myHRP/log_data:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_myHRP.log_data = log_data
_0_myHRP._d_log_data  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0), 0)
_0_myHRP._ad_log_data = (omniORB.tcInternal.tv_alias, log_data._NP_RepositoryId, "log_data", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0), 0))
_0_myHRP._tc_log_data = omniORB.tcInternal.createTypeCode(_0_myHRP._ad_log_data)
omniORB.registerType(log_data._NP_RepositoryId, _0_myHRP._ad_log_data, _0_myHRP._tc_log_data)
del log_data

# typedef ... params
class params:
    _NP_RepositoryId = "IDL:myHRP/params:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_myHRP.params = params
_0_myHRP._d_params  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_myHRP._ad_params = (omniORB.tcInternal.tv_alias, params._NP_RepositoryId, "params", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_myHRP._tc_params = omniORB.tcInternal.createTypeCode(_0_myHRP._ad_params)
omniORB.registerType(params._NP_RepositoryId, _0_myHRP._ad_params, _0_myHRP._tc_params)
del params

# interface MyHiroControlService
_0_myHRP._d_MyHiroControlService = (omniORB.tcInternal.tv_objref, "IDL:myHRP/MyHiroControlService:1.0", "MyHiroControlService")
omniORB.typeMapping["IDL:myHRP/MyHiroControlService:1.0"] = _0_myHRP._d_MyHiroControlService
_0_myHRP.MyHiroControlService = omniORB.newEmptyClass()
class MyHiroControlService :
    _NP_RepositoryId = _0_myHRP._d_MyHiroControlService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_myHRP.MyHiroControlService = MyHiroControlService
_0_myHRP._tc_MyHiroControlService = omniORB.tcInternal.createTypeCode(_0_myHRP._d_MyHiroControlService)
omniORB.registerType(MyHiroControlService._NP_RepositoryId, _0_myHRP._d_MyHiroControlService, _0_myHRP._tc_MyHiroControlService)

# MyHiroControlService operations and attributes
MyHiroControlService._d_set_joint_angles = ((omniORB.typeMapping["IDL:myHRP/KeyPose:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, ), None)
MyHiroControlService._d_move_arm_linearly = ((omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, ), None)
MyHiroControlService._d_waitPositionControl = ((), (omniORB.tcInternal.tv_boolean, ), None)
MyHiroControlService._d_waitForceControl = ((omniORB.typeMapping["IDL:myHRP/params:1.0"], ), (omniORB.tcInternal.tv_short, ), None)
MyHiroControlService._d_start_log = ((), (omniORB.tcInternal.tv_double, ), None)
MyHiroControlService._d_return_log = ((), (omniORB.typeMapping["IDL:myHRP/log_data:1.0"], ), None)
MyHiroControlService._d_init_force_control = ((omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"]), (), None)
MyHiroControlService._d_start_force_control = ((omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"], omniORB.typeMapping["IDL:myHRP/params:1.0"]), (), None)
MyHiroControlService._d_stop_force_control = ((omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (), None)

# MyHiroControlService object reference
class _objref_MyHiroControlService (CORBA.Object):
    _NP_RepositoryId = MyHiroControlService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def set_joint_angles(self, *args):
        return _omnipy.invoke(self, "set_joint_angles", _0_myHRP.MyHiroControlService._d_set_joint_angles, args)

    def move_arm_linearly(self, *args):
        return _omnipy.invoke(self, "move_arm_linearly", _0_myHRP.MyHiroControlService._d_move_arm_linearly, args)

    def waitPositionControl(self, *args):
        return _omnipy.invoke(self, "waitPositionControl", _0_myHRP.MyHiroControlService._d_waitPositionControl, args)

    def waitForceControl(self, *args):
        return _omnipy.invoke(self, "waitForceControl", _0_myHRP.MyHiroControlService._d_waitForceControl, args)

    def start_log(self, *args):
        return _omnipy.invoke(self, "start_log", _0_myHRP.MyHiroControlService._d_start_log, args)

    def return_log(self, *args):
        return _omnipy.invoke(self, "return_log", _0_myHRP.MyHiroControlService._d_return_log, args)

    def init_force_control(self, *args):
        return _omnipy.invoke(self, "init_force_control", _0_myHRP.MyHiroControlService._d_init_force_control, args)

    def start_force_control(self, *args):
        return _omnipy.invoke(self, "start_force_control", _0_myHRP.MyHiroControlService._d_start_force_control, args)

    def stop_force_control(self, *args):
        return _omnipy.invoke(self, "stop_force_control", _0_myHRP.MyHiroControlService._d_stop_force_control, args)

    __methods__ = ["set_joint_angles", "move_arm_linearly", "waitPositionControl", "waitForceControl", "start_log", "return_log", "init_force_control", "start_force_control", "stop_force_control"] + CORBA.Object.__methods__

omniORB.registerObjref(MyHiroControlService._NP_RepositoryId, _objref_MyHiroControlService)
_0_myHRP._objref_MyHiroControlService = _objref_MyHiroControlService
del MyHiroControlService, _objref_MyHiroControlService

# MyHiroControlService skeleton
__name__ = "myHRP__POA"
class MyHiroControlService (PortableServer.Servant):
    _NP_RepositoryId = _0_myHRP.MyHiroControlService._NP_RepositoryId


    _omni_op_d = {"set_joint_angles": _0_myHRP.MyHiroControlService._d_set_joint_angles, "move_arm_linearly": _0_myHRP.MyHiroControlService._d_move_arm_linearly, "waitPositionControl": _0_myHRP.MyHiroControlService._d_waitPositionControl, "waitForceControl": _0_myHRP.MyHiroControlService._d_waitForceControl, "start_log": _0_myHRP.MyHiroControlService._d_start_log, "return_log": _0_myHRP.MyHiroControlService._d_return_log, "init_force_control": _0_myHRP.MyHiroControlService._d_init_force_control, "start_force_control": _0_myHRP.MyHiroControlService._d_start_force_control, "stop_force_control": _0_myHRP.MyHiroControlService._d_stop_force_control}

MyHiroControlService._omni_skeleton = MyHiroControlService
_0_myHRP__POA.MyHiroControlService = MyHiroControlService
omniORB.registerSkeleton(MyHiroControlService._NP_RepositoryId, MyHiroControlService)
del MyHiroControlService
__name__ = "myHRP"

#
# End of module "myHRP"
#
__name__ = "hiroJointControl_idl"

_exported_modules = ( "myHRP", )

# The end.
