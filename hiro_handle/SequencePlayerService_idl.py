# Python stubs generated by omniidl from SequencePlayerService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "OpenHRP"
#
__name__ = "OpenHRP"
_0_OpenHRP = omniORB.openModule("OpenHRP", r"SequencePlayerService.idl")
_0_OpenHRP__POA = omniORB.openModule("OpenHRP__POA", r"SequencePlayerService.idl")


# typedef ... KeyPose
class KeyPose:
    _NP_RepositoryId = "IDL:OpenHRP/KeyPose:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.KeyPose = KeyPose
_0_OpenHRP._d_KeyPose  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0)
_0_OpenHRP._ad_KeyPose = (omniORB.tcInternal.tv_alias, KeyPose._NP_RepositoryId, "KeyPose", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0), 0))
_0_OpenHRP._tc_KeyPose = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_KeyPose)
omniORB.registerType(KeyPose._NP_RepositoryId, _0_OpenHRP._ad_KeyPose, _0_OpenHRP._tc_KeyPose)
del KeyPose

# interface SequencePlayerService
_0_OpenHRP._d_SequencePlayerService = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/SequencePlayerService:1.0", "SequencePlayerService")
omniORB.typeMapping["IDL:OpenHRP/SequencePlayerService:1.0"] = _0_OpenHRP._d_SequencePlayerService
_0_OpenHRP.SequencePlayerService = omniORB.newEmptyClass()
class SequencePlayerService :
    _NP_RepositoryId = _0_OpenHRP._d_SequencePlayerService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenHRP.SequencePlayerService = SequencePlayerService
_0_OpenHRP._tc_SequencePlayerService = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_SequencePlayerService)
omniORB.registerType(SequencePlayerService._NP_RepositoryId, _0_OpenHRP._d_SequencePlayerService, _0_OpenHRP._tc_SequencePlayerService)

# SequencePlayerService operations and attributes
SequencePlayerService._d_isEmpty = ((omniORB.tcInternal.tv_octet, omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_setJointAngles = ((omniORB.typeMapping["IDL:OpenHRP/KeyPose:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double), None)
SequencePlayerService._d_setJointAngle = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double), None)
SequencePlayerService._d_loadTrajectory = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double), None)
SequencePlayerService._d_clearBuffer = ((omniORB.tcInternal.tv_octet, ), (omniORB.tcInternal.tv_ulong, ), None)

# SequencePlayerService object reference
class _objref_SequencePlayerService (CORBA.Object):
    _NP_RepositoryId = SequencePlayerService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def isEmpty(self, *args):
        return _omnipy.invoke(self, "isEmpty", _0_OpenHRP.SequencePlayerService._d_isEmpty, args)

    def setJointAngles(self, *args):
        return _omnipy.invoke(self, "setJointAngles", _0_OpenHRP.SequencePlayerService._d_setJointAngles, args)

    def setJointAngle(self, *args):
        return _omnipy.invoke(self, "setJointAngle", _0_OpenHRP.SequencePlayerService._d_setJointAngle, args)

    def loadTrajectory(self, *args):
        return _omnipy.invoke(self, "loadTrajectory", _0_OpenHRP.SequencePlayerService._d_loadTrajectory, args)

    def clearBuffer(self, *args):
        return _omnipy.invoke(self, "clearBuffer", _0_OpenHRP.SequencePlayerService._d_clearBuffer, args)

    __methods__ = ["isEmpty", "setJointAngles", "setJointAngle", "loadTrajectory", "clearBuffer"] + CORBA.Object.__methods__

omniORB.registerObjref(SequencePlayerService._NP_RepositoryId, _objref_SequencePlayerService)
_0_OpenHRP._objref_SequencePlayerService = _objref_SequencePlayerService
del SequencePlayerService, _objref_SequencePlayerService

# SequencePlayerService skeleton
__name__ = "OpenHRP__POA"
class SequencePlayerService (PortableServer.Servant):
    _NP_RepositoryId = _0_OpenHRP.SequencePlayerService._NP_RepositoryId


    _omni_op_d = {"isEmpty": _0_OpenHRP.SequencePlayerService._d_isEmpty, "setJointAngles": _0_OpenHRP.SequencePlayerService._d_setJointAngles, "setJointAngle": _0_OpenHRP.SequencePlayerService._d_setJointAngle, "loadTrajectory": _0_OpenHRP.SequencePlayerService._d_loadTrajectory, "clearBuffer": _0_OpenHRP.SequencePlayerService._d_clearBuffer}

SequencePlayerService._omni_skeleton = SequencePlayerService
_0_OpenHRP__POA.SequencePlayerService = SequencePlayerService
omniORB.registerSkeleton(SequencePlayerService._NP_RepositoryId, SequencePlayerService)
del SequencePlayerService
__name__ = "OpenHRP"

#
# End of module "OpenHRP"
#
__name__ = "SequencePlayerService_idl"

_exported_modules = ( "OpenHRP", )

# The end.
