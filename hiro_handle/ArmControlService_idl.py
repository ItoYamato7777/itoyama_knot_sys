# Python stubs generated by omniidl from ArmControlService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "OpenHRP"
#
__name__ = "OpenHRP"
_0_OpenHRP = omniORB.openModule("OpenHRP", r"ArmControlService.idl")
_0_OpenHRP__POA = omniORB.openModule("OpenHRP__POA", r"ArmControlService.idl")


# struct SplineNode
_0_OpenHRP.SplineNode = omniORB.newEmptyClass()
class SplineNode (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenHRP/SplineNode:1.0"

    def __init__(self, node, time):
        self.node = node
        self.time = time

_0_OpenHRP.SplineNode = SplineNode
_0_OpenHRP._d_SplineNode  = (omniORB.tcInternal.tv_struct, SplineNode, SplineNode._NP_RepositoryId, "SplineNode", "node", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 6), "time", omniORB.tcInternal.tv_double)
_0_OpenHRP._tc_SplineNode = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_SplineNode)
omniORB.registerType(SplineNode._NP_RepositoryId, _0_OpenHRP._d_SplineNode, _0_OpenHRP._tc_SplineNode)
del SplineNode

# typedef ... SplineNodeSeq
class SplineNodeSeq:
    _NP_RepositoryId = "IDL:OpenHRP/SplineNodeSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_OpenHRP.SplineNodeSeq = SplineNodeSeq
_0_OpenHRP._d_SplineNodeSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/SplineNode:1.0"], 0)
_0_OpenHRP._ad_SplineNodeSeq = (omniORB.tcInternal.tv_alias, SplineNodeSeq._NP_RepositoryId, "SplineNodeSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:OpenHRP/SplineNode:1.0"], 0))
_0_OpenHRP._tc_SplineNodeSeq = omniORB.tcInternal.createTypeCode(_0_OpenHRP._ad_SplineNodeSeq)
omniORB.registerType(SplineNodeSeq._NP_RepositoryId, _0_OpenHRP._ad_SplineNodeSeq, _0_OpenHRP._tc_SplineNodeSeq)
del SplineNodeSeq

# enum ArmState
_0_OpenHRP.IDLE = omniORB.EnumItem("IDLE", 0)
_0_OpenHRP.ArmBusyState = omniORB.EnumItem("ArmBusyState", 1)
_0_OpenHRP.ArmState = omniORB.Enum("IDL:OpenHRP/ArmState:1.0", (_0_OpenHRP.IDLE, _0_OpenHRP.ArmBusyState,))

_0_OpenHRP._d_ArmState  = (omniORB.tcInternal.tv_enum, _0_OpenHRP.ArmState._NP_RepositoryId, "ArmState", _0_OpenHRP.ArmState._items)
_0_OpenHRP._tc_ArmState = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ArmState)
omniORB.registerType(_0_OpenHRP.ArmState._NP_RepositoryId, _0_OpenHRP._d_ArmState, _0_OpenHRP._tc_ArmState)

# interface ArmControlService
_0_OpenHRP._d_ArmControlService = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/ArmControlService:1.0", "ArmControlService")
omniORB.typeMapping["IDL:OpenHRP/ArmControlService:1.0"] = _0_OpenHRP._d_ArmControlService
_0_OpenHRP.ArmControlService = omniORB.newEmptyClass()
class ArmControlService :
    _NP_RepositoryId = _0_OpenHRP._d_ArmControlService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenHRP.ArmControlService = ArmControlService
_0_OpenHRP._tc_ArmControlService = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ArmControlService)
omniORB.registerType(ArmControlService._NP_RepositoryId, _0_OpenHRP._d_ArmControlService, _0_OpenHRP._tc_ArmControlService)

# ArmControlService operations and attributes
ArmControlService._d_checkStatus = ((), (omniORB.typeMapping["IDL:OpenHRP/ArmState:1.0"], ), None)
ArmControlService._d_setTargetAngular = ((omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_double, ), None)
ArmControlService._d_getCurrentConfiguration = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), None)
ArmControlService._d_setTargetsSpline = ((omniORB.typeMapping["IDL:OpenHRP/SplineNodeSeq:1.0"], ), (omniORB.tcInternal.tv_ulong, ), None)

# ArmControlService object reference
class _objref_ArmControlService (CORBA.Object):
    _NP_RepositoryId = ArmControlService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def checkStatus(self, *args):
        return _omnipy.invoke(self, "checkStatus", _0_OpenHRP.ArmControlService._d_checkStatus, args)

    def setTargetAngular(self, *args):
        return _omnipy.invoke(self, "setTargetAngular", _0_OpenHRP.ArmControlService._d_setTargetAngular, args)

    def getCurrentConfiguration(self, *args):
        return _omnipy.invoke(self, "getCurrentConfiguration", _0_OpenHRP.ArmControlService._d_getCurrentConfiguration, args)

    def setTargetsSpline(self, *args):
        return _omnipy.invoke(self, "setTargetsSpline", _0_OpenHRP.ArmControlService._d_setTargetsSpline, args)

    __methods__ = ["checkStatus", "setTargetAngular", "getCurrentConfiguration", "setTargetsSpline"] + CORBA.Object.__methods__

omniORB.registerObjref(ArmControlService._NP_RepositoryId, _objref_ArmControlService)
_0_OpenHRP._objref_ArmControlService = _objref_ArmControlService
del ArmControlService, _objref_ArmControlService

# ArmControlService skeleton
__name__ = "OpenHRP__POA"
class ArmControlService (PortableServer.Servant):
    _NP_RepositoryId = _0_OpenHRP.ArmControlService._NP_RepositoryId


    _omni_op_d = {"checkStatus": _0_OpenHRP.ArmControlService._d_checkStatus, "setTargetAngular": _0_OpenHRP.ArmControlService._d_setTargetAngular, "getCurrentConfiguration": _0_OpenHRP.ArmControlService._d_getCurrentConfiguration, "setTargetsSpline": _0_OpenHRP.ArmControlService._d_setTargetsSpline}

ArmControlService._omni_skeleton = ArmControlService
_0_OpenHRP__POA.ArmControlService = ArmControlService
omniORB.registerSkeleton(ArmControlService._NP_RepositoryId, ArmControlService)
del ArmControlService
__name__ = "OpenHRP"

#
# End of module "OpenHRP"
#
__name__ = "ArmControlService_idl"

_exported_modules = ( "OpenHRP", )

# The end.
